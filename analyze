#!/usr/bin/env python3

import argparse
import sys
import logging

from src.job_info import JobInfoFetcher
from src.svg_printer import SvgPrinter
from urllib.parse import urlsplit, urljoin

parser = argparse.ArgumentParser(description="Analyze a Jenkins build and print a time graph")

# Jenkins
parser.add_argument('-u', '--url', dest='url',
                    help="URL of the Jenkins server")
parser.add_argument('-j', '--job', dest='job',
                    help="Job name")
parser.add_argument('-b', '--build', dest='build_number', default="lastCompletedBuild",
                    help="Build number")

# Output
parser.add_argument('-o', '--output', dest='output',
                    help="Output path in SVG or PNG or HTML format")
parser.add_argument('-d', '--debug', dest='debug', action='store_true',
                    help="Set log level to DEBUG")

args = parser.parse_args()

url = args.url
job = args.job
build_number = args.build_number

if args.debug:
    logging.basicConfig(level=logging.DEBUG)

if url and not job:
    # Try to parse the URL
    if '/job/' in url:
        parsed = urlsplit(url)

        path = parsed.path.split("/job/")

        # Jenkins URL
        full_path = path[0]
        if '/view/' in parsed.path:
            full_path = parsed.path.split("/view/")[0]
        url = urljoin(parsed.geturl(), '/' + full_path)

        # Job Name & Build Number
        info = path[1].split('/')
        job = info[0]
        build_number = info[1]

if not url or not job or not args.output:
    print("A required argument has not been provided.", file=sys.stderr)
    parser.print_help()
    sys.exit(1)

job_info = JobInfoFetcher.fetch(url, job, build_number, fetch_sections=True)

printer = SvgPrinter(job_info)
printer.print(args.output)
